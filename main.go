package main

import "fmt"
        
type Vertex struct {//X,Y int}로 써도 됨 
  X int
  Y int
  }

var (
v = Vertex{1,2}
w = &Vertex{1,2}//&주소 받기!
x = Vertex{X: 1}//Y:0
y = Vertex{}//X,Y:0
)

func main() {
  //.을 이용해서 X의 값에 접근해서 변경할 수도 있고 그걸 확인 할 수도 있음! 신기하구만!

//*을 찍어서 그 주소의 값을 가져오라는 명령문을 실행시켜야 한다. 안 그러면 앞에 불필요한 &가 붙는다.
fmt.Println(v,*w,x,y)//&안 보고 싶으면 *찍으면 됨

}

//구조체 리터럴은 필드와 값을 나열해서 구조체를 새로 할당하는 방법입니다.

///원하는 필드를 `{Name: value}` 구문을 통해 할당할 수 있습니다. (필드의 순서는 상관 없습니다.)

////특별한 접두어 & 를 사용하면 구조체 리터럴에 대한 포인터를 생성할 수 있습니다.